pipeline {
    agent { label 'wsl2' }
    
     parameters {
        // Choice parameter for deployment action
        choice(name: 'DEPLOY_SERVICES', choices: ['No', 'Yes'], description: 'Run docker-compose up to deploy services')
        // Choice parameter for clean-up action
        choice(name: 'CLEAN_UP_SERVICES', choices: ['Yes', 'No'], description: 'Run docker-compose down to stop services after pipeline')
        
        choice(name: 'BRANCH', choices: ['main', 'staging', 'prod'], description: 'Choose the deployment environment')
    }
    
     properties([
        // Discard old builds - keep only the last 10 builds or builds that are not older than 30 days
        buildDiscarder(logRotator(numToKeepStr: '1', daysToKeepStr: '2'))
    ])

    environment {
        REPO_URL = "https://github.com/shubhamksawant/call-booking-application-microservices.git"
        AWS_REGION = "your-aws-region"
        ECR_REPO_URI = "your-ecr-repo-uri"
        DOCKER_COMPOSE_FILE = "docker-compose.yaml"
    }

    stages {
        stage('Check tools') {
            steps {
                echo "checking versions"
                sh "docker --version"
                sh "docker-compose --version"
                sh "git --version"
                sh "ls "
            }
            
        }

        stage('Initialize the variables') {
            // Each stage is made up of steps
            steps{
                script{
                    CODE_VERSION="${BUILD_NUMBER}-${ENV}"
                    // ZIP_NODE="abcdefgh-0.0.${CODE_VERSION}.zip"
                }
            }                
        }
        
        stage('Checkout') {
            steps {
                checkout scmGit(
                branches: [[name: "*/${params.BRANCH}"]],
                extensions: [], 
                userRemoteConfigs: [[url: "${REPO_URL}"]]
                 )
                sh "ls "
            }
            
        }
        
        stage('Build') {
            steps {
              

                sh "docker-compose build"
            }
        }
            
        stage('Push to ecr') {
            steps {
                
               echo "Pushing images to Amazon ECR..."
                sh '''
                    aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REPO_URI
                    PROJECT_NAME="${JOB_NAME.substring(JOB_NAME.lastIndexOf('/') + 1, JOB_NAME.length())}"
                    echo $PROJECT_NAME
                    docker tag ${PROJECT_NAME}-adminapi:latest $ECR_REPO_URI:adminapi:latest
                    docker tag ${PROJECT_NAME}-adminui:latest $ECR_REPO_URI:adminui:latest
                    docker tag ${PROJECT_NAME}-userapi:latest $ECR_REPO_URI:userapi:latest
                    docker tag ${PROJECT_NAME}-userui:latest $ECR_REPO_URI:userui:latest
                '''
            }
            
        }
            
        stage('Docker compose up') {
            when {
                expression { return params.DEPLOY_SERVICES == 'Yes' }
            }
            steps {
              sh "docker-compose stop"
              sh "docker-compose up -d"
            }
            
        }
        
        stage('Docker compose down') {
            when {
                expression { return params.CLEAN_UP_SERVICES == 'Yes' }
            }
            steps {
              sh "docker-compose down"
            }
            
        }
        
      }
    }

